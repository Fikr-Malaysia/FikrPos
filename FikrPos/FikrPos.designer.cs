#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FikrPos
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FikrPos")]
	public partial class FikrPosDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppInfo(AppInfo instance);
    partial void UpdateAppInfo(AppInfo instance);
    partial void DeleteAppInfo(AppInfo instance);
    partial void InsertAppUser(AppUser instance);
    partial void UpdateAppUser(AppUser instance);
    partial void DeleteAppUser(AppUser instance);
    partial void UpdateSaleDetail(SaleDetail instance);
    partial void DeleteSaleDetail(SaleDetail instance);
    partial void InsertSale(Sale instance);
    partial void UpdateSale(Sale instance);
    partial void DeleteSale(Sale instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertInventory(Inventory instance);
    partial void UpdateInventory(Inventory instance);
    partial void DeleteInventory(Inventory instance);
    partial void InsertInventoryDetail(InventoryDetail instance);
    partial void UpdateInventoryDetail(InventoryDetail instance);
    partial void DeleteInventoryDetail(InventoryDetail instance);
    #endregion
		
		public FikrPosDataContext() : 
				base(global::FikrPos.Properties.Settings.Default.FikrPosConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FikrPosDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FikrPosDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FikrPosDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FikrPosDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AppInfo> AppInfos
		{
			get
			{
				return this.GetTable<AppInfo>();
			}
		}
		
		public System.Data.Linq.Table<AppUser> AppUsers
		{
			get
			{
				return this.GetTable<AppUser>();
			}
		}
		
		public System.Data.Linq.Table<SaleDetail> SaleDetails
		{
			get
			{
				return this.GetTable<SaleDetail>();
			}
		}
		
		public System.Data.Linq.Table<Sale> Sales
		{
			get
			{
				return this.GetTable<Sale>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Inventory> Inventories
		{
			get
			{
				return this.GetTable<Inventory>();
			}
		}
		
		public System.Data.Linq.Table<InventoryDetail> InventoryDetails
		{
			get
			{
				return this.GetTable<InventoryDetail>();
			}
		}
		
		private void InsertSaleDetail(SaleDetail obj)
		{
			System.Nullable<int> p1 = obj.ID;
			this.InsertSaleDetail(ref p1, ((System.Nullable<int>)(obj.ProductID)), ((System.Nullable<int>)(obj.Qty)), ((System.Nullable<double>)(obj.Tax)), ((System.Nullable<double>)(obj.Discount)), ((System.Nullable<double>)(obj.Price)), ((System.Nullable<int>)(obj.SaleID)));
			obj.ID = p1.GetValueOrDefault();
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertProduct")]
		public int InsertProduct([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Code", DbType="VarChar(255)")] string code, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(255)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Price", DbType="Float")] System.Nullable<double> price, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Unit", DbType="VarChar(255)")] string unit, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Discount", DbType="Float")] System.Nullable<double> discount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Tax", DbType="Float")] System.Nullable<double> tax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Stock", DbType="Int")] System.Nullable<int> stock, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MinimumStock", DbType="Int")] System.Nullable<int> minimumStock)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), code, name, price, unit, discount, tax, stock, minimumStock);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertSaleDetail")]
		public int InsertSaleDetail([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SaleDetailID", DbType="Int")] ref System.Nullable<int> saleDetailID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductID", DbType="Int")] System.Nullable<int> productID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Qty", DbType="Int")] System.Nullable<int> qty, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Tax", DbType="Float")] System.Nullable<double> tax, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Discount", DbType="Float")] System.Nullable<double> discount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Price", DbType="Float")] System.Nullable<double> price, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SaleID", DbType="Int")] System.Nullable<int> saleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), saleDetailID, productID, qty, tax, discount, price, saleID);
			saleDetailID = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppInfo")]
	public partial class AppInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private byte _IsInit;
		
		private string _Company_Name;
		
		private string _Company_Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIsInitChanging(byte value);
    partial void OnIsInitChanged();
    partial void OnCompany_NameChanging(string value);
    partial void OnCompany_NameChanged();
    partial void OnCompany_AddressChanging(string value);
    partial void OnCompany_AddressChanged();
    #endregion
		
		public AppInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInit", DbType="TinyInt NOT NULL")]
		public byte IsInit
		{
			get
			{
				return this._IsInit;
			}
			set
			{
				if ((this._IsInit != value))
				{
					this.OnIsInitChanging(value);
					this.SendPropertyChanging();
					this._IsInit = value;
					this.SendPropertyChanged("IsInit");
					this.OnIsInitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Company Name]", Storage="_Company_Name", DbType="VarChar(255)")]
		public string Company_Name
		{
			get
			{
				return this._Company_Name;
			}
			set
			{
				if ((this._Company_Name != value))
				{
					this.OnCompany_NameChanging(value);
					this.SendPropertyChanging();
					this._Company_Name = value;
					this.SendPropertyChanged("Company_Name");
					this.OnCompany_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Company Address]", Storage="_Company_Address", DbType="VarChar(255)")]
		public string Company_Address
		{
			get
			{
				return this._Company_Address;
			}
			set
			{
				if ((this._Company_Address != value))
				{
					this.OnCompany_AddressChanging(value);
					this.SendPropertyChanging();
					this._Company_Address = value;
					this.SendPropertyChanged("Company_Address");
					this.OnCompany_AddressChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppUser")]
	public partial class AppUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Role;
		
		private EntitySet<Sale> _Sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public AppUser()
		{
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(255)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppUser_Sale", Storage="_Sales", ThisKey="ID", OtherKey="UserId")]
		public EntitySet<Sale> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.AppUser = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.AppUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SaleDetail")]
	public partial class SaleDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private int _Qty;
		
		private double _Tax;
		
		private double _Discount;
		
		private double _Price;
		
		private System.Nullable<double> _Extended_Price;
		
		private int _SaleID;
		
		private EntitySet<Inventory> _Inventories;
		
		private EntitySet<InventoryDetail> _InventoryDetails;
		
		private EntityRef<Sale> _Sale;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnQtyChanging(int value);
    partial void OnQtyChanged();
    partial void OnTaxChanging(double value);
    partial void OnTaxChanged();
    partial void OnDiscountChanging(double value);
    partial void OnDiscountChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnExtended_PriceChanging(System.Nullable<double> value);
    partial void OnExtended_PriceChanged();
    partial void OnSaleIDChanging(int value);
    partial void OnSaleIDChanged();
    #endregion
		
		public SaleDetail()
		{
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._InventoryDetails = new EntitySet<InventoryDetail>(new Action<InventoryDetail>(this.attach_InventoryDetails), new Action<InventoryDetail>(this.detach_InventoryDetails));
			this._Sale = default(EntityRef<Sale>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int NOT NULL")]
		public int Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tax", DbType="Float NOT NULL")]
		public double Tax
		{
			get
			{
				return this._Tax;
			}
			set
			{
				if ((this._Tax != value))
				{
					this.OnTaxChanging(value);
					this.SendPropertyChanging();
					this._Tax = value;
					this.SendPropertyChanged("Tax");
					this.OnTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Float NOT NULL")]
		public double Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Extended Price]", Storage="_Extended_Price", DbType="Float")]
		public System.Nullable<double> Extended_Price
		{
			get
			{
				return this._Extended_Price;
			}
			set
			{
				if ((this._Extended_Price != value))
				{
					this.OnExtended_PriceChanging(value);
					this.SendPropertyChanging();
					this._Extended_Price = value;
					this.SendPropertyChanged("Extended_Price");
					this.OnExtended_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleID", DbType="Int NOT NULL")]
		public int SaleID
		{
			get
			{
				return this._SaleID;
			}
			set
			{
				if ((this._SaleID != value))
				{
					if (this._Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleIDChanging(value);
					this.SendPropertyChanging();
					this._SaleID = value;
					this.SendPropertyChanged("SaleID");
					this.OnSaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SaleDetail_Inventory", Storage="_Inventories", ThisKey="ID", OtherKey="SaleDetailID")]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SaleDetail_InventoryDetail", Storage="_InventoryDetails", ThisKey="ID", OtherKey="SaleDetailID")]
		public EntitySet<InventoryDetail> InventoryDetails
		{
			get
			{
				return this._InventoryDetails;
			}
			set
			{
				this._InventoryDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_SaleDetail", Storage="_Sale", ThisKey="SaleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Sale Sale
		{
			get
			{
				return this._Sale.Entity;
			}
			set
			{
				Sale previousValue = this._Sale.Entity;
				if (((previousValue != value) 
							|| (this._Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sale.Entity = null;
						previousValue.SaleDetails.Remove(this);
					}
					this._Sale.Entity = value;
					if ((value != null))
					{
						value.SaleDetails.Add(this);
						this._SaleID = value.ID;
					}
					else
					{
						this._SaleID = default(int);
					}
					this.SendPropertyChanged("Sale");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SaleDetail", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.SaleDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.SaleDetails.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.SaleDetail = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.SaleDetail = null;
		}
		
		private void attach_InventoryDetails(InventoryDetail entity)
		{
			this.SendPropertyChanging();
			entity.SaleDetail = this;
		}
		
		private void detach_InventoryDetails(InventoryDetail entity)
		{
			this.SendPropertyChanging();
			entity.SaleDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sale")]
	public partial class Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Date;
		
		private int _UserId;
		
		private System.Nullable<int> _Total_Quantity;
		
		private System.Nullable<double> _Total_Discount;
		
		private System.Nullable<double> _Total_Tax;
		
		private System.Nullable<double> _Total_Price;
		
		private System.Nullable<double> _Total_Extended_Price;
		
		private System.Nullable<double> _Payment;
		
		private System.Nullable<double> _Change;
		
		private EntitySet<SaleDetail> _SaleDetails;
		
		private EntityRef<AppUser> _AppUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTotal_QuantityChanging(System.Nullable<int> value);
    partial void OnTotal_QuantityChanged();
    partial void OnTotal_DiscountChanging(System.Nullable<double> value);
    partial void OnTotal_DiscountChanged();
    partial void OnTotal_TaxChanging(System.Nullable<double> value);
    partial void OnTotal_TaxChanged();
    partial void OnTotal_PriceChanging(System.Nullable<double> value);
    partial void OnTotal_PriceChanged();
    partial void OnTotal_Extended_PriceChanging(System.Nullable<double> value);
    partial void OnTotal_Extended_PriceChanged();
    partial void OnPaymentChanging(System.Nullable<double> value);
    partial void OnPaymentChanged();
    partial void OnChangeChanging(System.Nullable<double> value);
    partial void OnChangeChanged();
    #endregion
		
		public Sale()
		{
			this._SaleDetails = new EntitySet<SaleDetail>(new Action<SaleDetail>(this.attach_SaleDetails), new Action<SaleDetail>(this.detach_SaleDetails));
			this._AppUser = default(EntityRef<AppUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AppUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Total Quantity]", Storage="_Total_Quantity", DbType="Int")]
		public System.Nullable<int> Total_Quantity
		{
			get
			{
				return this._Total_Quantity;
			}
			set
			{
				if ((this._Total_Quantity != value))
				{
					this.OnTotal_QuantityChanging(value);
					this.SendPropertyChanging();
					this._Total_Quantity = value;
					this.SendPropertyChanged("Total_Quantity");
					this.OnTotal_QuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Total Discount]", Storage="_Total_Discount", DbType="Float")]
		public System.Nullable<double> Total_Discount
		{
			get
			{
				return this._Total_Discount;
			}
			set
			{
				if ((this._Total_Discount != value))
				{
					this.OnTotal_DiscountChanging(value);
					this.SendPropertyChanging();
					this._Total_Discount = value;
					this.SendPropertyChanged("Total_Discount");
					this.OnTotal_DiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Total Tax]", Storage="_Total_Tax", DbType="Float")]
		public System.Nullable<double> Total_Tax
		{
			get
			{
				return this._Total_Tax;
			}
			set
			{
				if ((this._Total_Tax != value))
				{
					this.OnTotal_TaxChanging(value);
					this.SendPropertyChanging();
					this._Total_Tax = value;
					this.SendPropertyChanged("Total_Tax");
					this.OnTotal_TaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Total Price]", Storage="_Total_Price", DbType="Float")]
		public System.Nullable<double> Total_Price
		{
			get
			{
				return this._Total_Price;
			}
			set
			{
				if ((this._Total_Price != value))
				{
					this.OnTotal_PriceChanging(value);
					this.SendPropertyChanging();
					this._Total_Price = value;
					this.SendPropertyChanged("Total_Price");
					this.OnTotal_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Total Extended Price]", Storage="_Total_Extended_Price", DbType="Float")]
		public System.Nullable<double> Total_Extended_Price
		{
			get
			{
				return this._Total_Extended_Price;
			}
			set
			{
				if ((this._Total_Extended_Price != value))
				{
					this.OnTotal_Extended_PriceChanging(value);
					this.SendPropertyChanging();
					this._Total_Extended_Price = value;
					this.SendPropertyChanged("Total_Extended_Price");
					this.OnTotal_Extended_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="Float")]
		public System.Nullable<double> Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Change", DbType="Float")]
		public System.Nullable<double> Change
		{
			get
			{
				return this._Change;
			}
			set
			{
				if ((this._Change != value))
				{
					this.OnChangeChanging(value);
					this.SendPropertyChanging();
					this._Change = value;
					this.SendPropertyChanged("Change");
					this.OnChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_SaleDetail", Storage="_SaleDetails", ThisKey="ID", OtherKey="SaleID")]
		public EntitySet<SaleDetail> SaleDetails
		{
			get
			{
				return this._SaleDetails;
			}
			set
			{
				this._SaleDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppUser_Sale", Storage="_AppUser", ThisKey="UserId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AppUser AppUser
		{
			get
			{
				return this._AppUser.Entity;
			}
			set
			{
				AppUser previousValue = this._AppUser.Entity;
				if (((previousValue != value) 
							|| (this._AppUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AppUser.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._AppUser.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("AppUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SaleDetails(SaleDetail entity)
		{
			this.SendPropertyChanging();
			entity.Sale = this;
		}
		
		private void detach_SaleDetails(SaleDetail entity)
		{
			this.SendPropertyChanging();
			entity.Sale = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Code;
		
		private string _Name;
		
		private double _Price;
		
		private string _Unit;
		
		private double _Discount;
		
		private System.Nullable<double> _Tax;
		
		private EntitySet<SaleDetail> _SaleDetails;
		
		private EntitySet<Inventory> _Inventories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnDiscountChanging(double value);
    partial void OnDiscountChanged();
    partial void OnTaxChanging(System.Nullable<double> value);
    partial void OnTaxChanged();
    #endregion
		
		public Product()
		{
			this._SaleDetails = new EntitySet<SaleDetail>(new Action<SaleDetail>(this.attach_SaleDetails), new Action<SaleDetail>(this.detach_SaleDetails));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Float NOT NULL")]
		public double Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tax", DbType="Float")]
		public System.Nullable<double> Tax
		{
			get
			{
				return this._Tax;
			}
			set
			{
				if ((this._Tax != value))
				{
					this.OnTaxChanging(value);
					this.SendPropertyChanging();
					this._Tax = value;
					this.SendPropertyChanged("Tax");
					this.OnTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SaleDetail", Storage="_SaleDetails", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<SaleDetail> SaleDetails
		{
			get
			{
				return this._SaleDetails;
			}
			set
			{
				this._SaleDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Inventory", Storage="_Inventories", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SaleDetails(SaleDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_SaleDetails(SaleDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inventory")]
	public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProductID;
		
		private int _Current_Quantity;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _SaleDetailID;
		
		private System.Nullable<int> _Minimum_Stock;
		
		private EntitySet<InventoryDetail> _InventoryDetails;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<SaleDetail> _SaleDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnCurrent_QuantityChanging(int value);
    partial void OnCurrent_QuantityChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnSaleDetailIDChanging(System.Nullable<int> value);
    partial void OnSaleDetailIDChanged();
    partial void OnMinimum_StockChanging(System.Nullable<int> value);
    partial void OnMinimum_StockChanged();
    #endregion
		
		public Inventory()
		{
			this._InventoryDetails = new EntitySet<InventoryDetail>(new Action<InventoryDetail>(this.attach_InventoryDetails), new Action<InventoryDetail>(this.detach_InventoryDetails));
			this._Product = default(EntityRef<Product>);
			this._SaleDetail = default(EntityRef<SaleDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Current Quantity]", Storage="_Current_Quantity", DbType="Int NOT NULL")]
		public int Current_Quantity
		{
			get
			{
				return this._Current_Quantity;
			}
			set
			{
				if ((this._Current_Quantity != value))
				{
					this.OnCurrent_QuantityChanging(value);
					this.SendPropertyChanging();
					this._Current_Quantity = value;
					this.SendPropertyChanged("Current_Quantity");
					this.OnCurrent_QuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleDetailID", DbType="Int")]
		public System.Nullable<int> SaleDetailID
		{
			get
			{
				return this._SaleDetailID;
			}
			set
			{
				if ((this._SaleDetailID != value))
				{
					if (this._SaleDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleDetailIDChanging(value);
					this.SendPropertyChanging();
					this._SaleDetailID = value;
					this.SendPropertyChanged("SaleDetailID");
					this.OnSaleDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Minimum Stock]", Storage="_Minimum_Stock", DbType="Int")]
		public System.Nullable<int> Minimum_Stock
		{
			get
			{
				return this._Minimum_Stock;
			}
			set
			{
				if ((this._Minimum_Stock != value))
				{
					this.OnMinimum_StockChanging(value);
					this.SendPropertyChanging();
					this._Minimum_Stock = value;
					this.SendPropertyChanged("Minimum_Stock");
					this.OnMinimum_StockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_InventoryDetail", Storage="_InventoryDetails", ThisKey="ID", OtherKey="InventoryID")]
		public EntitySet<InventoryDetail> InventoryDetails
		{
			get
			{
				return this._InventoryDetails;
			}
			set
			{
				this._InventoryDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Inventory", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SaleDetail_Inventory", Storage="_SaleDetail", ThisKey="SaleDetailID", OtherKey="ID", IsForeignKey=true)]
		public SaleDetail SaleDetail
		{
			get
			{
				return this._SaleDetail.Entity;
			}
			set
			{
				SaleDetail previousValue = this._SaleDetail.Entity;
				if (((previousValue != value) 
							|| (this._SaleDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SaleDetail.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._SaleDetail.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._SaleDetailID = value.ID;
					}
					else
					{
						this._SaleDetailID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SaleDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InventoryDetails(InventoryDetail entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = this;
		}
		
		private void detach_InventoryDetails(InventoryDetail entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InventoryDetail")]
	public partial class InventoryDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _InventoryID;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _SaleDetailID;
		
		private int _Change;
		
		private string _Message;
		
		private System.Nullable<int> _Current_Stock;
		
		private EntityRef<Inventory> _Inventory;
		
		private EntityRef<SaleDetail> _SaleDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInventoryIDChanging(int value);
    partial void OnInventoryIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnSaleDetailIDChanging(System.Nullable<int> value);
    partial void OnSaleDetailIDChanged();
    partial void OnChangeChanging(int value);
    partial void OnChangeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnCurrent_StockChanging(System.Nullable<int> value);
    partial void OnCurrent_StockChanged();
    #endregion
		
		public InventoryDetail()
		{
			this._Inventory = default(EntityRef<Inventory>);
			this._SaleDetail = default(EntityRef<SaleDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryID", DbType="Int NOT NULL")]
		public int InventoryID
		{
			get
			{
				return this._InventoryID;
			}
			set
			{
				if ((this._InventoryID != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryID = value;
					this.SendPropertyChanged("InventoryID");
					this.OnInventoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleDetailID", DbType="Int")]
		public System.Nullable<int> SaleDetailID
		{
			get
			{
				return this._SaleDetailID;
			}
			set
			{
				if ((this._SaleDetailID != value))
				{
					if (this._SaleDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleDetailIDChanging(value);
					this.SendPropertyChanging();
					this._SaleDetailID = value;
					this.SendPropertyChanged("SaleDetailID");
					this.OnSaleDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Change", DbType="Int NOT NULL")]
		public int Change
		{
			get
			{
				return this._Change;
			}
			set
			{
				if ((this._Change != value))
				{
					this.OnChangeChanging(value);
					this.SendPropertyChanging();
					this._Change = value;
					this.SendPropertyChanged("Change");
					this.OnChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(255)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Current Stock]", Storage="_Current_Stock", DbType="Int")]
		public System.Nullable<int> Current_Stock
		{
			get
			{
				return this._Current_Stock;
			}
			set
			{
				if ((this._Current_Stock != value))
				{
					this.OnCurrent_StockChanging(value);
					this.SendPropertyChanging();
					this._Current_Stock = value;
					this.SendPropertyChanged("Current_Stock");
					this.OnCurrent_StockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_InventoryDetail", Storage="_Inventory", ThisKey="InventoryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Inventory Inventory
		{
			get
			{
				return this._Inventory.Entity;
			}
			set
			{
				Inventory previousValue = this._Inventory.Entity;
				if (((previousValue != value) 
							|| (this._Inventory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inventory.Entity = null;
						previousValue.InventoryDetails.Remove(this);
					}
					this._Inventory.Entity = value;
					if ((value != null))
					{
						value.InventoryDetails.Add(this);
						this._InventoryID = value.ID;
					}
					else
					{
						this._InventoryID = default(int);
					}
					this.SendPropertyChanged("Inventory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SaleDetail_InventoryDetail", Storage="_SaleDetail", ThisKey="SaleDetailID", OtherKey="ID", IsForeignKey=true)]
		public SaleDetail SaleDetail
		{
			get
			{
				return this._SaleDetail.Entity;
			}
			set
			{
				SaleDetail previousValue = this._SaleDetail.Entity;
				if (((previousValue != value) 
							|| (this._SaleDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SaleDetail.Entity = null;
						previousValue.InventoryDetails.Remove(this);
					}
					this._SaleDetail.Entity = value;
					if ((value != null))
					{
						value.InventoryDetails.Add(this);
						this._SaleDetailID = value.ID;
					}
					else
					{
						this._SaleDetailID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SaleDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
